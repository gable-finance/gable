/**
 * Babylon Gateway API - RCnet V2
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal.
 *
 * The version of the OpenAPI document: 0.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ComponentEntityAccessRules } from './ComponentEntityAccessRules';
/**
 *
 * @export
 * @interface StateEntityDetailsResponseFungibleResourceDetails
 */
export interface StateEntityDetailsResponseFungibleResourceDetails {
    /**
     *
     * @type {string}
     * @memberof StateEntityDetailsResponseFungibleResourceDetails
     */
    type: StateEntityDetailsResponseFungibleResourceDetailsTypeEnum;
    /**
     *
     * @type {ComponentEntityAccessRules}
     * @memberof StateEntityDetailsResponseFungibleResourceDetails
     */
    access_rules: ComponentEntityAccessRules;
    /**
     *
     * @type {number}
     * @memberof StateEntityDetailsResponseFungibleResourceDetails
     */
    divisibility: number;
    /**
     * String-encoded decimal representing the amount of a related fungible resource.
     * @type {string}
     * @memberof StateEntityDetailsResponseFungibleResourceDetails
     */
    total_supply: string;
    /**
     * String-encoded decimal representing the amount of a related fungible resource.
     * @type {string}
     * @memberof StateEntityDetailsResponseFungibleResourceDetails
     */
    total_minted: string;
    /**
     * String-encoded decimal representing the amount of a related fungible resource.
     * @type {string}
     * @memberof StateEntityDetailsResponseFungibleResourceDetails
     */
    total_burned: string;
}
/**
 * @export
 */
export declare const StateEntityDetailsResponseFungibleResourceDetailsTypeEnum: {
    readonly FungibleResource: "FungibleResource";
};
export type StateEntityDetailsResponseFungibleResourceDetailsTypeEnum = typeof StateEntityDetailsResponseFungibleResourceDetailsTypeEnum[keyof typeof StateEntityDetailsResponseFungibleResourceDetailsTypeEnum];
/**
 * Check if a given object implements the StateEntityDetailsResponseFungibleResourceDetails interface.
 */
export declare function instanceOfStateEntityDetailsResponseFungibleResourceDetails(value: object): boolean;
export declare function StateEntityDetailsResponseFungibleResourceDetailsFromJSON(json: any): StateEntityDetailsResponseFungibleResourceDetails;
export declare function StateEntityDetailsResponseFungibleResourceDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): StateEntityDetailsResponseFungibleResourceDetails;
export declare function StateEntityDetailsResponseFungibleResourceDetailsToJSON(value?: StateEntityDetailsResponseFungibleResourceDetails | null): any;

/**
 * Babylon Gateway API - RCnet V2
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal.
 *
 * The version of the OpenAPI document: 0.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { StateEntityDetailsRequest, StateEntityDetailsResponse, StateEntityFungibleResourceVaultsPageRequest, StateEntityFungibleResourceVaultsPageResponse, StateEntityFungiblesPageRequest, StateEntityFungiblesPageResponse, StateEntityMetadataPageRequest, StateEntityMetadataPageResponse, StateEntityNonFungibleIdsPageRequest, StateEntityNonFungibleIdsPageResponse, StateEntityNonFungibleResourceVaultsPageRequest, StateEntityNonFungibleResourceVaultsPageResponse, StateEntityNonFungiblesPageRequest, StateEntityNonFungiblesPageResponse, StateNonFungibleDataRequest, StateNonFungibleDataResponse, StateNonFungibleIdsRequest, StateNonFungibleIdsResponse, StateValidatorsListRequest, StateValidatorsListResponse } from '../models';
export interface EntityFungibleResourceVaultPageRequest {
    stateEntityFungibleResourceVaultsPageRequest: StateEntityFungibleResourceVaultsPageRequest;
}
export interface EntityFungiblesPageRequest {
    stateEntityFungiblesPageRequest: StateEntityFungiblesPageRequest;
}
export interface EntityMetadataPageRequest {
    stateEntityMetadataPageRequest: StateEntityMetadataPageRequest;
}
export interface EntityNonFungibleIdsPageRequest {
    stateEntityNonFungibleIdsPageRequest: StateEntityNonFungibleIdsPageRequest;
}
export interface EntityNonFungibleResourceVaultPageRequest {
    stateEntityNonFungibleResourceVaultsPageRequest: StateEntityNonFungibleResourceVaultsPageRequest;
}
export interface EntityNonFungiblesPageRequest {
    stateEntityNonFungiblesPageRequest: StateEntityNonFungiblesPageRequest;
}
export interface NonFungibleDataRequest {
    stateNonFungibleDataRequest: StateNonFungibleDataRequest;
}
export interface NonFungibleIdsRequest {
    stateNonFungibleIdsRequest: StateNonFungibleIdsRequest;
}
export interface StateEntityDetailsOperationRequest {
    stateEntityDetailsRequest: StateEntityDetailsRequest;
}
export interface StateValidatorsListOperationRequest {
    stateValidatorsListRequest: StateValidatorsListRequest;
}
/**
 *
 */
export declare class StateApi extends runtime.BaseAPI {
    /**
     * Returns vaults for fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get vault page of Entity Fungible resource aggregated per vault
     */
    entityFungibleResourceVaultPageRaw(requestParameters: EntityFungibleResourceVaultPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityFungibleResourceVaultsPageResponse>>;
    /**
     * Returns vaults for fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get vault page of Entity Fungible resource aggregated per vault
     */
    entityFungibleResourceVaultPage(requestParameters: EntityFungibleResourceVaultPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityFungibleResourceVaultsPageResponse>;
    /**
     * Returns the total amount of each fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get Entity Fungible Resource Totals Page aggregated globally
     */
    entityFungiblesPageRaw(requestParameters: EntityFungiblesPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityFungiblesPageResponse>>;
    /**
     * Returns the total amount of each fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get Entity Fungible Resource Totals Page aggregated globally
     */
    entityFungiblesPage(requestParameters: EntityFungiblesPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityFungiblesPageResponse>;
    /**
     * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger.
     * Get Entity Metadata Page
     */
    entityMetadataPageRaw(requestParameters: EntityMetadataPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityMetadataPageResponse>>;
    /**
     * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger.
     * Get Entity Metadata Page
     */
    entityMetadataPage(requestParameters: EntityMetadataPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityMetadataPageResponse>;
    /**
     * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource\'s first appearence on the ledger.
     * Get Entity Non-Fungible IDs
     */
    entityNonFungibleIdsPageRaw(requestParameters: EntityNonFungibleIdsPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityNonFungibleIdsPageResponse>>;
    /**
     * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource\'s first appearence on the ledger.
     * Get Entity Non-Fungible IDs
     */
    entityNonFungibleIdsPage(requestParameters: EntityNonFungibleIdsPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityNonFungibleIdsPageResponse>;
    /**
     * Returns vaults for non fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get vault page of Entity Non Fungible aggregated per vault
     */
    entityNonFungibleResourceVaultPageRaw(requestParameters: EntityNonFungibleResourceVaultPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityNonFungibleResourceVaultsPageResponse>>;
    /**
     * Returns vaults for non fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get vault page of Entity Non Fungible aggregated per vault
     */
    entityNonFungibleResourceVaultPage(requestParameters: EntityNonFungibleResourceVaultPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityNonFungibleResourceVaultsPageResponse>;
    /**
     * Returns the total amount of each non-fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get Entity Non-Fungible Resource Totals Page aggregated globally
     */
    entityNonFungiblesPageRaw(requestParameters: EntityNonFungiblesPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityNonFungiblesPageResponse>>;
    /**
     * Returns the total amount of each non-fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get Entity Non-Fungible Resource Totals Page aggregated globally
     */
    entityNonFungiblesPage(requestParameters: EntityNonFungiblesPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityNonFungiblesPageResponse>;
    /**
     * Returns data associated with a given non-fungible ID of a given non-fungible resource.
     * Get Non-Fungible Data
     */
    nonFungibleDataRaw(requestParameters: NonFungibleDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateNonFungibleDataResponse>>;
    /**
     * Returns data associated with a given non-fungible ID of a given non-fungible resource.
     * Get Non-Fungible Data
     */
    nonFungibleData(requestParameters: NonFungibleDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateNonFungibleDataResponse>;
    /**
     * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger.
     * Get Non-Fungible Collection
     */
    nonFungibleIdsRaw(requestParameters: NonFungibleIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateNonFungibleIdsResponse>>;
    /**
     * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger.
     * Get Non-Fungible Collection
     */
    nonFungibleIds(requestParameters: NonFungibleIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateNonFungibleIdsResponse>;
    /**
     * Returns detailed information for collection of entities. Aggregate resources globally by default.
     * Get Entity Details
     */
    stateEntityDetailsRaw(requestParameters: StateEntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityDetailsResponse>>;
    /**
     * Returns detailed information for collection of entities. Aggregate resources globally by default.
     * Get Entity Details
     */
    stateEntityDetails(requestParameters: StateEntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityDetailsResponse>;
    /**
     * Get Validators List
     */
    stateValidatorsListRaw(requestParameters: StateValidatorsListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateValidatorsListResponse>>;
    /**
     * Get Validators List
     */
    stateValidatorsList(requestParameters: StateValidatorsListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateValidatorsListResponse>;
}

/**
 * Babylon Gateway API - RCnet V2
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal.
 *
 * The version of the OpenAPI document: 0.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { TransactionCommittedDetailsRequest, TransactionCommittedDetailsResponse, TransactionConstructionResponse, TransactionPreviewRequest, TransactionPreviewResponse, TransactionStatusRequest, TransactionStatusResponse, TransactionSubmitRequest, TransactionSubmitResponse } from '../models';
export interface TransactionCommittedDetailsOperationRequest {
    transactionCommittedDetailsRequest: TransactionCommittedDetailsRequest;
}
export interface TransactionPreviewOperationRequest {
    transactionPreviewRequest: TransactionPreviewRequest;
}
export interface TransactionStatusOperationRequest {
    transactionStatusRequest: TransactionStatusRequest;
}
export interface TransactionSubmitOperationRequest {
    transactionSubmitRequest: TransactionSubmitRequest;
}
/**
 *
 */
export declare class TransactionApi extends runtime.BaseAPI {
    /**
     * Returns the committed details and receipt of the transaction for a given transaction identifier. Transaction identifiers which don\'t correspond to a committed transaction will return a `TransactionNotFoundError`.
     * Get Committed Transaction Details
     */
    transactionCommittedDetailsRaw(requestParameters: TransactionCommittedDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCommittedDetailsResponse>>;
    /**
     * Returns the committed details and receipt of the transaction for a given transaction identifier. Transaction identifiers which don\'t correspond to a committed transaction will return a `TransactionNotFoundError`.
     * Get Committed Transaction Details
     */
    transactionCommittedDetails(requestParameters: TransactionCommittedDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCommittedDetailsResponse>;
    /**
     * Returns information needed to construct a new transaction including current `epoch` number.
     * Get Construction Metadata
     */
    transactionConstructionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionConstructionResponse>>;
    /**
     * Returns information needed to construct a new transaction including current `epoch` number.
     * Get Construction Metadata
     */
    transactionConstruction(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionConstructionResponse>;
    /**
     * Previews transaction against the network. This endpoint is effectively a proxy towards CoreApi\'s `/v0/transaction/preview` endpoint. See CoreApi\'s documentation for more details.
     * Preview Transaction
     */
    transactionPreviewRaw(requestParameters: TransactionPreviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionPreviewResponse>>;
    /**
     * Previews transaction against the network. This endpoint is effectively a proxy towards CoreApi\'s `/v0/transaction/preview` endpoint. See CoreApi\'s documentation for more details.
     * Preview Transaction
     */
    transactionPreview(requestParameters: TransactionPreviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionPreviewResponse>;
    /**
     * Returns overall transaction status and all of its known payloads based on supplied intent hash.
     * Get Transaction Status
     */
    transactionStatusRaw(requestParameters: TransactionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionStatusResponse>>;
    /**
     * Returns overall transaction status and all of its known payloads based on supplied intent hash.
     * Get Transaction Status
     */
    transactionStatus(requestParameters: TransactionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionStatusResponse>;
    /**
     * Submits a signed transaction payload to the network.
     * Submit Transaction
     */
    transactionSubmitRaw(requestParameters: TransactionSubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionSubmitResponse>>;
    /**
     * Submits a signed transaction payload to the network.
     * Submit Transaction
     */
    transactionSubmit(requestParameters: TransactionSubmitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionSubmitResponse>;
}

export declare class ValidationConfig {
    networkId: number;
    minCostUnitLimit: number;
    maxCostUnitLimit: number;
    minTipPercentage: number;
    maxTipPercentage: number;
    maxEpochRange: number;
    maxNotarizedPayloadSize: number;
    constructor(networkId: number, minCostUnitLimit: number, maxCostUnitLimit: number, minTipPercentage: number, maxTipPercentage: number, maxEpochRange: number, maxNotarizedPayloadSize: number);
    static default(networkId: number): ValidationConfig;
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class StaticallyValidateTransactionInput {
    compiledNotarizedIntent: Uint8Array;
    validationConfig: ValidationConfig;
    constructor(compiledNotarizedIntent: Uint8Array | string, validationConfig: ValidationConfig);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class StaticallyValidateTransactionOutput {
    readonly validity: "Valid" | "Invalid";
    constructor(validity: "Valid" | "Invalid");
}
export declare class StaticallyValidateTransactionOutputValid extends StaticallyValidateTransactionOutput {
    constructor();
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class StaticallyValidateTransactionOutputInvalid extends StaticallyValidateTransactionOutput {
    error: string;
    constructor(error: string);
    toString(): string;
    toObject(): Record<string, any>;
}

import { InstructionList, TransactionManifest } from "../transaction";
/**
 * Clients have a need to be able to read, parse, understand, and interrogate transaction manifests
 * to get more information on what a transactions might be doing. Transaction manifests have so far
 * existed in one format: as strings. While the string format is very human readable, it is not
 * easily readable by machines as a lexer and parser are needed to make sense of them; thus, it is
 * for clients to programmatically make sense of transactions. As such, there is a need for another
 * transaction manifest format (to supplement, NOT replace) which machines can easily make sense of
 * without the need to implement a lexer and parser.
 *
 * Therefore, this library introduces a `Parsed` format for transaction manifests which clients can
 * use when wanting to read and interrogate their transaction manifests in code. The transaction
 * manifest `Parsed` format has a 1:1 mapping to the string format of transaction manifests,
 * meaning that anything which can be done in the string format of transaction manifests, can be
 * done in the `Parsed` format as well. If a JSON interface for the Radix Engine Toolkit is used,
 * then the parsed instructions will be all in JSON.
 *
 * This function allows the client the convert their manifest between the two supported manifest
 * types: string and parsed.
 */
export declare class ConvertManifestInput {
    /**
     * An unsigned 8 bit integer serialized as a string which represents the ID of the network that
     * the manifest will be used on. The primary use of this is for any Bech32m encoding or decoding
     * of addresses
     */
    networkId: number;
    /**
     * Defines the output format that we would like the manifest to be in after this input is
     * performed.
     */
    instructionsOutputKind: InstructionList.Kind;
    /**
     * The manifest to convert to the format described by `instructions_output_kind`
     */
    manifest: TransactionManifest;
    constructor(networkId: number, instructionsOutputKind: InstructionList.Kind, manifest: TransactionManifest);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * The output of the [`ConvertManifestInput`]
 */
export type ConvertManifestOutput = TransactionManifest;

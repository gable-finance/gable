import { TransactionValidity } from "wrapper/default";
import { InstructionList, SignedTransactionIntent } from ".";
import { Signature } from "../../models/crypto";
import { ValidationConfig } from "../functions";
export declare class NotarizedTransaction {
    signedIntent: SignedTransactionIntent;
    notarySignature: Signature.Signature;
    constructor(signedIntent: SignedTransactionIntent, notarySignature: Signature.Signature);
    compile(): Promise<Uint8Array>;
    static decompile(compiledIntent: Uint8Array, instructionsOutputKind?: InstructionList.Kind): Promise<NotarizedTransaction>;
    transactionId(): Promise<Uint8Array>;
    intentHash(): Promise<Uint8Array>;
    signedIntentHash(): Promise<Uint8Array>;
    notarizedPayloadHash(): Promise<Uint8Array>;
    staticallyValidate(validationConfig: ValidationConfig): Promise<TransactionValidity>;
    toString(): string;
    toObject(): Record<string, any>;
}

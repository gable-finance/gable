import { PublicKey, Signature, SignatureWithPublicKey } from ".";
export declare class Secp256k1 implements IPrivateKey {
    readonly bytes: Uint8Array;
    constructor(privateKey: Uint8Array | string);
    publicKey(): PublicKey.Secp256k1;
    publicKeyBytes(): Uint8Array;
    publicKeyHex(): string;
    sign(data: Uint8Array): Uint8Array;
    signToSignature(data: Uint8Array): Signature.Secp256k1;
    signToSignatureWithPublicKey(data: Uint8Array): SignatureWithPublicKey.Secp256k1;
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Ed25519 implements IPrivateKey {
    readonly bytes: Uint8Array;
    constructor(privateKey: Uint8Array | string);
    publicKey(): PublicKey.Ed25519;
    publicKeyBytes(): Uint8Array;
    publicKeyHex(): string;
    sign(data: Uint8Array): Uint8Array;
    signToSignature(data: Uint8Array): Signature.Ed25519;
    signToSignatureWithPublicKey(data: Uint8Array): SignatureWithPublicKey.Ed25519;
    toString(): string;
    toObject(): Record<string, any>;
}
export interface IPrivateKey {
    publicKey: () => PublicKey.PublicKey;
    publicKeyBytes: () => Uint8Array;
    publicKeyHex: () => string;
    sign: (data: Uint8Array) => Uint8Array;
    signToSignature: (data: Uint8Array) => Signature.Signature;
    signToSignatureWithPublicKey: (data: Uint8Array) => SignatureWithPublicKey.SignatureWithPublicKey;
}

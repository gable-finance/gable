import { Decimal as DecimalJs } from "decimal.js";
import { EntityType, PublicKey } from "..";
import { IAddress } from "../../base/base_address";
export declare abstract class Value {
    readonly kind: Kind;
    constructor(type: Kind);
    abstract toString(): string;
}
export declare enum Kind {
    Bool = "Bool",
    U8 = "U8",
    U16 = "U16",
    U32 = "U32",
    U64 = "U64",
    U128 = "U128",
    I8 = "I8",
    I16 = "I16",
    I32 = "I32",
    I64 = "I64",
    I128 = "I128",
    String = "String",
    Enum = "Enum",
    Some = "Some",
    None = "None",
    Ok = "Ok",
    Err = "Err",
    Array = "Array",
    Map = "Map",
    Tuple = "Tuple",
    Decimal = "Decimal",
    PreciseDecimal = "PreciseDecimal",
    Address = "Address",
    Bucket = "Bucket",
    Proof = "Proof",
    NonFungibleLocalId = "NonFungibleLocalId",
    NonFungibleGlobalId = "NonFungibleGlobalId",
    Expression = "Expression",
    Blob = "Blob",
    Bytes = "Bytes",
    AddressReservation = "AddressReservation",
    NamedAddress = "NamedAddress"
}
export declare class Bool extends Value {
    value: boolean;
    constructor(value: boolean);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U8 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U16 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U32 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U64 extends Value {
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U128 extends Value {
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I8 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I16 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I32 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I64 extends Value {
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I128 extends Value {
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class String extends Value {
    value: string;
    constructor(value: string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class EnumDiscriminator {
    readonly type: "String" | "U8";
    constructor(type: "String" | "U8");
}
export declare class EnumStringDiscriminator extends EnumDiscriminator {
    discriminator: string;
    constructor(discriminator: string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class EnumU8Discriminator extends EnumDiscriminator {
    discriminator: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Enum extends Value {
    variant: EnumDiscriminator;
    private internalFields;
    get fields(): globalThis.Array<Value>;
    set fields(fields: globalThis.Array<Value>);
    constructor(variant: EnumDiscriminator, fields?: globalThis.Array<Value>);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Some extends Value {
    private internalValue;
    get value(): Value;
    set value(value: Value);
    constructor(value: Value);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class None extends Value {
    constructor();
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Ok extends Value {
    private internalValue;
    get value(): Value;
    set value(value: Value);
    constructor(value: Value);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Err extends Value {
    private internalValue;
    get value(): Value;
    set value(value: Value);
    constructor(value: Value);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Array extends Value {
    elementKind: Kind;
    internalElements: globalThis.Array<Object>;
    get elements(): globalThis.Array<Value>;
    set elements(elements: globalThis.Array<Value>);
    constructor(elementKind: Kind, elements: globalThis.Array<Value>);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Map extends Value {
    keyValueKind: Kind;
    valueValueKind: Kind;
    internalEntries: globalThis.Array<[Object, Object]>;
    get entries(): globalThis.Array<[Value, Value]>;
    set entries(entries: globalThis.Array<[Value, Value]>);
    constructor(keyValueKind: Kind, valueValueKind: Kind, entries?: globalThis.Array<[Value, Value]>);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Tuple extends Value {
    internalFields: globalThis.Array<Object>;
    get fields(): globalThis.Array<Value>;
    set fields(elements: globalThis.Array<Value>);
    constructor(elements: globalThis.Array<Value>);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Decimal extends Value {
    value: DecimalJs;
    constructor(value: DecimalJs | string | number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class PreciseDecimal extends Value {
    value: DecimalJs;
    constructor(value: DecimalJs | string | number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Address extends Value implements IAddress {
    value: string;
    constructor(address: string);
    static virtualAccountAddress(publicKey: PublicKey.PublicKey, networkId: number): Promise<Address>;
    static virtualIdentityAddress(publicKey: PublicKey.PublicKey, networkId: number): Promise<Address>;
    static fromOlympiaAccountAddress(olympiaAccountAddress: string, networkId: number): Promise<Address>;
    static decode(bytes: Uint8Array | string, networkId: number): Promise<Address>;
    static faucetComponentAddress(networkId: number): Promise<Address>;
    static faucetPackageAddress(networkId: number): Promise<Address>;
    static accountPackageAddress(networkId: number): Promise<Address>;
    static xrdResourceAddress(networkId: number): Promise<Address>;
    static systemTokenResourceAddress(networkId: number): Promise<Address>;
    static Secp256k1TokenResourceAddress(networkId: number): Promise<Address>;
    static Ed25519TokenResourceAddress(networkId: number): Promise<Address>;
    static packageTokenResourceAddress(networkId: number): Promise<Address>;
    static consensusManagerComponentAddress(networkId: number): Promise<Address>;
    networkId(): Promise<number>;
    networkName(): Promise<string>;
    entityType(): Promise<EntityType>;
    data(): Promise<Uint8Array>;
    private static knownEntityAddresses;
    private addressInformation;
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Bucket extends Value {
    value: string;
    constructor(identifier: string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Proof extends Value {
    value: string;
    constructor(identifier: string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Expression extends Value {
    value: string;
    constructor(expression: string);
    static entireWorktop(): Expression;
    static entireAuthZone(): Expression;
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Blob extends Value {
    value: Uint8Array;
    constructor(hash: Uint8Array | string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Bytes extends Value {
    hex: Uint8Array;
    constructor(value: Uint8Array | string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class NonFungibleLocalId extends Value {
    value: string;
    constructor(value: string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class NonFungibleGlobalId extends Value {
    resourceAddress: Address;
    nonFungibleLocalId: NonFungibleLocalId;
    constructor(resourceAddress: Address, nonFungibleLocalId: NonFungibleLocalId);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class AddressReservation extends Value {
    value: string;
    constructor(identifier: string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class NamedAddress extends Value {
    value: string;
    constructor(identifier: string);
    toString(): string;
    toObject(): Record<string, any>;
}

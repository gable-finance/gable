import { Decimal as DecimalJs } from "decimal.js";
import { EntityType } from "../..";
import { IAddress } from "../../base/base_address";
import { PublicKey } from "../crypto";
export declare abstract class Value {
    readonly kind: Kind;
    constructor(type: Kind);
    abstract toString(): string;
}
export declare enum Kind {
    Bool = "Bool",
    U8 = "U8",
    U16 = "U16",
    U32 = "U32",
    U64 = "U64",
    U128 = "U128",
    I8 = "I8",
    I16 = "I16",
    I32 = "I32",
    I64 = "I64",
    I128 = "I128",
    String = "String",
    Enum = "Enum",
    Array = "Array",
    Map = "Map",
    Tuple = "Tuple",
    Address = "Address",
    Own = "Own",
    Decimal = "Decimal",
    PreciseDecimal = "PreciseDecimal",
    NonFungibleLocalId = "NonFungibleLocalId",
    Reference = "Reference",
    Bytes = "Bytes"
}
export declare class Bool extends Value {
    value: boolean;
    constructor(value: boolean);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U8 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U16 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U32 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U64 extends Value {
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class U128 extends Value {
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I8 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I16 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I32 extends Value {
    value: number;
    constructor(value: number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I64 extends Value {
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class I128 extends Value {
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class String extends Value {
    value: string;
    constructor(value: string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Enum extends Value {
    variant_id: number;
    private internalFields;
    get fields(): globalThis.Array<Value>;
    set fields(fields: globalThis.Array<Value>);
    constructor(variant: number, fields?: globalThis.Array<Value>);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Array extends Value {
    elementKind: Kind;
    internalElements: globalThis.Array<Object>;
    get elements(): globalThis.Array<Value>;
    set elements(elements: globalThis.Array<Value>);
    constructor(elementKind: Kind, elements: globalThis.Array<Value>);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Map extends Value {
    keyKind: Kind;
    valueKind: Kind;
    internalEntries: globalThis.Array<{
        key: Object;
        value: Object;
    }>;
    get entries(): globalThis.Array<{
        key: Object;
        value: Object;
    }>;
    set entries(entries: globalThis.Array<{
        key: Object;
        value: Object;
    }>);
    constructor(keyValueKind: Kind, valueValueKind: Kind, entries?: globalThis.Array<{
        key: Object;
        value: Object;
    }>);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Tuple extends Value {
    internalFields: globalThis.Array<Object>;
    get fields(): globalThis.Array<Value>;
    set fields(elements: globalThis.Array<Value>);
    constructor(elements: globalThis.Array<Value>);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Decimal extends Value {
    value: DecimalJs;
    constructor(value: DecimalJs | string | number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class PreciseDecimal extends Value {
    value: DecimalJs;
    constructor(value: DecimalJs | string | number);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Address extends Value implements IAddress {
    value: string;
    constructor(address: string);
    static virtualAccountAddress(publicKey: PublicKey.PublicKey, networkId: number): Promise<Address>;
    static virtualIdentityAddress(publicKey: PublicKey.PublicKey, networkId: number): Promise<Address>;
    static fromOlympiaAccountAddress(olympiaAccountAddress: string, networkId: number): Promise<Address>;
    static decode(bytes: Uint8Array | string, networkId: number): Promise<Address>;
    static faucetComponentAddress(networkId: number): Promise<Address>;
    static faucetPackageAddress(networkId: number): Promise<Address>;
    static accountPackageAddress(networkId: number): Promise<Address>;
    static xrdResourceAddress(networkId: number): Promise<Address>;
    static systemTokenResourceAddress(networkId: number): Promise<Address>;
    static Secp256k1TokenResourceAddress(networkId: number): Promise<Address>;
    static Ed25519TokenResourceAddress(networkId: number): Promise<Address>;
    static packageTokenResourceAddress(networkId: number): Promise<Address>;
    static consensusManagerComponentAddress(networkId: number): Promise<Address>;
    networkId(): Promise<number>;
    networkName(): Promise<string>;
    entityType(): Promise<EntityType>;
    data(): Promise<Uint8Array>;
    private static knownEntityAddresses;
    private addressInformation;
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Own extends Value implements IAddress {
    value: string;
    constructor(address: string);
    networkId(): Promise<number>;
    networkName(): Promise<string>;
    entityType(): Promise<EntityType>;
    data(): Promise<Uint8Array>;
    private addressInformation;
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Integer {
    readonly type: string;
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class UUID {
    readonly type: string;
    value: bigint;
    constructor(value: bigint);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class NonFungibleLocalId extends Value {
    value: string;
    constructor(value: string);
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Reference extends Value implements IAddress {
    value: string;
    constructor(address: string);
    networkId(): Promise<number>;
    networkName(): Promise<string>;
    entityType(): Promise<EntityType>;
    data(): Promise<Uint8Array>;
    private addressInformation;
    toString(): string;
    toObject(): Record<string, any>;
}
export declare class Bytes extends Value {
    hex: Uint8Array;
    elementKind: string;
    constructor(value: Uint8Array);
    toString(): string;
    toObject(): Record<string, any>;
}

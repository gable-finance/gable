import { NotarizedTransaction, SignatureWithPublicKey, SignedTransactionIntent, TransactionHeader, TransactionIntent, TransactionManifest } from "../models";
import { RadixEngineToolkitWasmWrapper } from "../wrapper/wasm_wrapper";
import { NotarySignatureSource, SignatureSource } from "./builder_models";
export declare class TransactionBuilder {
    private retWrapper;
    constructor(retWrapper: RadixEngineToolkitWasmWrapper);
    static new(): Promise<TransactionBuilder>;
    static from(transactionIntent: TransactionIntent | SignedTransactionIntent): Promise<TransactionBuilderIntentSignaturesStep>;
    header(header: TransactionHeader): TransactionBuilderManifestStep;
}
export declare class TransactionBuilderManifestStep {
    private retWrapper;
    private header;
    constructor(retWrapper: RadixEngineToolkitWasmWrapper, header: TransactionHeader);
    manifest(manifest: TransactionManifest): TransactionBuilderIntentSignaturesStep;
}
export declare class TransactionBuilderIntentSignaturesStep {
    private retWrapper;
    private intent;
    private intentSignatures;
    constructor(retWrapper: RadixEngineToolkitWasmWrapper, header: TransactionHeader, manifest: TransactionManifest, intentSignatures?: Array<SignatureWithPublicKey.SignatureWithPublicKey>);
    sign(source: SignatureSource): TransactionBuilderIntentSignaturesStep;
    notarize(source: NotarySignatureSource): NotarizedTransaction;
    compileIntent(): {
        compiledIntent: Uint8Array;
        intent: TransactionIntent;
        intentHash: Uint8Array;
    };
    compileSignedIntent(): {
        compiledSignedIntent: Uint8Array;
        signedIntent: SignedTransactionIntent;
        signedIntentHash: Uint8Array;
    };
    private compileIntentInternal;
    private compileSignedIntentInternal;
}

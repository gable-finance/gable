import Decimal from "decimal.js";
import { Instruction, ManifestAstValue, TransactionManifest } from "../models";
export declare class ManifestBuilder {
    private instructions;
    private idAllocator;
    private blobs;
    constructor(instructions?: Array<Instruction.Instruction>);
    /**
     * An instruction to call a function with the given list of arguments on the given package address
     * and blueprint name.
     * @param packageAddress The address of the package containing the blueprint that contains the
     * desired function. This package address is serialized as the `PackageAddress` variant of the
     * `ManifestAstValue` model.
     * @param blueprintName A string of the name of the blueprint containing the desired function.
     * @param functionName A string of the name of the function to call.
     * @param arguments An optional array of `ManifestAstValue` arguments to call the function with.
     * If this array is empty or is not provided, then the function is called with no arguments.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    callFunction(packageAddress: ManifestAstValue.Address | string, blueprintName: ManifestAstValue.String | string, functionName: ManifestAstValue.String | string, args: Array<ManifestAstValue.Value>): ManifestBuilder;
    /**
     * An instruction to call a method with a given name on a given component address with the given
     * list of arguments.
     * @param componentAddress The address of the component which contains the method to be invoked.
     * @param methodName A string of the name of the method to call. his field is serialized as a
     * `String` from the ManifestAstValue model.
     * @param arguments An optional array of `ManifestAstValue` arguments to call the method with. If
     * this array is empty or is not provided, then the method is called with no arguments.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    callMethod(componentAddress: ManifestAstValue.Address | string, methodName: ManifestAstValue.String | string, args: Array<ManifestAstValue.Value>): ManifestBuilder;
    /**
     * An instruction to take the entire amount of a given resource address from the worktop and put
     * it in a bucket.
     * @param resourceAddress The address of the resource to take from the worktop.
     * @param andThen A callback function with the manifest builder and bucket.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    takeAllFromWorktop(resourceAddress: ManifestAstValue.Address | string, andThen: (builder: ManifestBuilder, bucket: ManifestAstValue.Bucket) => ManifestBuilder): ManifestBuilder;
    /**
     * An instruction to take the an amount of a given resource address from the worktop and put it in
     * a bucket.
     * @param resourceAddress The address of the resource to take from the worktop.
     * @param amount The amount of the resource to take from the worktop.
     * @param andThen A callback function with the manifest builder and bucket.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    takeFromWorktop(resourceAddress: ManifestAstValue.Address | string, amount: Decimal | number | string | ManifestAstValue.Decimal, andThen: (builder: ManifestBuilder, bucket: ManifestAstValue.Bucket) => ManifestBuilder): ManifestBuilder;
    /**
     * An instruction to take the a set of non-fungible ids of a given resource address from the
     * worktop and put it in a bucket.
     * @param resourceAddress The address of the resource to take from the worktop.
     * @param ids The non-fungible ids to take from the worktop. This is a set (serialized as a JSON
     * array) of `NonFungibleLocalId`s from the ManifestAstValue model.
     * @param andThen A callback function with the manifest builder and bucket.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    takeNonFungiblesFromWorktop(resourceAddress: ManifestAstValue.Address | string, ids: Array<ManifestAstValue.NonFungibleLocalId>, andThen: (builder: ManifestBuilder, bucket: ManifestAstValue.Bucket) => ManifestBuilder): ManifestBuilder;
    /**
     * Returns a bucket of tokens to the worktop.
     * @param bucket The bucket to return to the worktop.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    returnToWorktop(bucket: ManifestAstValue.Bucket): ManifestBuilder;
    /**
     * An instruction to assert that a specific amount of a specific resource address exists in the
     * worktop.
     * @param resourceAddress The address of the resource to perform the assertion on.
     * @param amount The amount of the resource to assert their existence in the worktop.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    assertWorktopContains(resourceAddress: ManifestAstValue.Address | string, amount: Decimal | number | string | ManifestAstValue.Decimal): ManifestBuilder;
    /**
     * An instruction to assert that a set ids of a specific resource address exists in the worktop.
     * @param resourceAddress The address of the resource to perform the assertion on.
     * @param ids The non-fungible ids of the resource to assert their existence in the worktop. This
     * is a set (serialized as a JSON array) of `NonFungibleLocalId`s from the ManifestAstValue model.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    assertWorktopContainsNonFungibles(resourceAddress: ManifestAstValue.Address | string, ids: Array<ManifestAstValue.NonFungibleLocalId>): ManifestBuilder;
    /**
     * An instruction which pops a proof from the AuthZone stack and into an identifiable proof
     * @param andThen A callback function with the manifest builder and bucket.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    popFromAuthZone(andThen: (builder: ManifestBuilder, bucket: ManifestAstValue.Proof) => ManifestBuilder): ManifestBuilder;
    /**
     * An instruction that pushes a proof to the auth zone stack.
     * @param proof The proof to push to the auth zone stack.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    pushToAuthZone(proof: ManifestAstValue.Proof): ManifestBuilder;
    /**
     * An instruction which clears the auth zone stack by dropping all of the proofs in that stack.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    clearAuthZone(): ManifestBuilder;
    /**
     * Clears all the proofs of signature virtual badges.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    clearSignatureProofs(): ManifestBuilder;
    /**
     * An instruction to create a proof of the entire amount of a given resource address from the auth
     * zone.
     * @param resourceAddress The address of the resource to create a proof of.
     * @param andThen A callback function with the manifest builder and bucket.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createProofFromAuthZoneOfAll(resourceAddress: ManifestAstValue.Address | string, andThen: (builder: ManifestBuilder, bucket: ManifestAstValue.Proof) => ManifestBuilder): ManifestBuilder;
    /**
     * An instruction to create a proof of the an amount of a given resource address from the auth
     * zone.
     * @param resourceAddress The address of the resource to create a proof of.
     * @param amount The amount of the resource to create a proof of.
     * @param andThen A callback function with the manifest builder and bucket.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createProofFromAuthZoneOfAmount(resourceAddress: ManifestAstValue.Address | string, amount: Decimal | number | string | ManifestAstValue.Decimal, andThen: (builder: ManifestBuilder, bucket: ManifestAstValue.Proof) => ManifestBuilder): ManifestBuilder;
    /**
     * An instruction to create a proof of the a set of non-fungible ids of a given resource address
     * from the auth zone.
     * @param resourceAddress The address of the resource to create a proof of.
     * @param ids The non-fungible ids to create a proof of. This is a set (serialized as a JSON
     * array) of `NonFungibleLocalId`s from the ManifestAstValue model.
     * @param andThen A callback function with the manifest builder and bucket.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createProofFromAuthZoneOfNonFungibles(resourceAddress: ManifestAstValue.Address | string, ids: Array<ManifestAstValue.NonFungibleLocalId>, andThen: (builder: ManifestBuilder, bucket: ManifestAstValue.Proof) => ManifestBuilder): ManifestBuilder;
    /**
     * An instruction to create a proof given a bucket of some resources
     * @param bucket The bucket of resources to create a proof from.
     * @param andThen A callback function with the manifest builder and bucket.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createProofFromBucket(bucket: ManifestAstValue.Bucket, andThen: (builder: ManifestBuilder, bucket: ManifestAstValue.Proof) => ManifestBuilder): ManifestBuilder;
    /**
     * An instruction to clone a proof creating a second proof identical to the original
     * @param proof The original proof, or the proof to be cloned.
     * @param andThen A callback function with the manifest builder and bucket.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    cloneProof(proof: ManifestAstValue.Proof, andThen: (builder: ManifestBuilder, bucket: ManifestAstValue.Proof) => ManifestBuilder): ManifestBuilder;
    /**
     * An instruction to drop a proof.
     * @param proof The proof to drop.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    dropProof(proof: ManifestAstValue.Proof): ManifestBuilder;
    /**
     * An instruction to drop all proofs currently present in the transaction context.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    dropAllProofs(): ManifestBuilder;
    /**
     * An instruction to publish a package and set it's associated royalty configs, metadata, and
     * access rules.
     * @param code The code of the package. Note that this isn't the code blob or the blob hash, this
     * is the actual code of the package.
     * @param schema The schema of the package. Note that this isn't the schema blob or the blob hash,
     * this is the actual schema of the package.
     * @param metadata The metadata to use for the package
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    publishPackage(code: Uint8Array | string, schema: Uint8Array | string, metadata: ManifestAstValue.Map): ManifestBuilder;
    /**
     * An instruction to burn a bucket of tokens.
     * @param bucket The bucket of tokens to burn.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    burnResource(bucket: ManifestAstValue.Bucket): ManifestBuilder;
    /**
     * An instruction to set the metadata on an entity.
     * @param entityAddress The address of the entity to set metadata on. This is a discriminated
     * union of types where it can either be a `ResourceAddress`, `ComponentAddress`, `PackageAddress`
     * or a `ComponentAddress`.
     * @param key A string of the key to set the metadata for.
     * @param value A string of the value to set the metadata for.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    setMetadata(entityAddress: ManifestAstValue.Address | string, key: ManifestAstValue.String, value: ManifestAstValue.Enum): ManifestBuilder;
    /**
     * An instruction to set the metadata on an entity.
     * @param entityAddress The address of the entity to set metadata on. This is a discriminated
     * union of types where it can either be a `ResourceAddress`, `ComponentAddress`, `PackageAddress`
     * or a `ComponentAddress`.
     * @param key A string of the key to remove the metadata for.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    removeMetadata(entityAddress: ManifestAstValue.Address | string, key: ManifestAstValue.String): ManifestBuilder;
    /**
     * An instruction to modify the royalties on a component
     * @param componentAddress The component address of the component to modify royalties for.
     * @param royaltyConfig The royalty config to set on the component. This is an `Enum` from the
     * `ManifestAstValue` model.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    setComponentRoyaltyConfig(componentAddress: ManifestAstValue.Address | string, methodName: ManifestAstValue.String, royaltyConfig: ManifestAstValue.Tuple): ManifestBuilder;
    /**
     * An instruction to claim royalties of a package
     * @param packageAddress The package address of the package to claim royalties for.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    claimPackageRoyalty(packageAddress: ManifestAstValue.Address | string): ManifestBuilder;
    /**
     * An instruction to claim royalties of a component
     * @param componentAddress The component address of the component to claim royalties for.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    claimComponentRoyalty(componentAddress: ManifestAstValue.Address | string): ManifestBuilder;
    /**
     * An instruction to mint fungible resources
     * @param resourceAddress The address of the resource to mint tokens of.
     * @param amount The amount of fungible tokens to mint of this resource.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    mintFungible(resourceAddress: ManifestAstValue.Address | string, amount: Decimal | number | string | ManifestAstValue.Decimal): ManifestBuilder;
    /**
     * An instruction to mint non-fungibles of a resource
     * @param resourceAddress The address of the resource to mint tokens of.
     * @param entries The non-fungible tokens to mint
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    mintNonFungible(resourceAddress: ManifestAstValue.Address | string, entries: ManifestAstValue.Map): ManifestBuilder;
    /**
     * An instruction to mint non-fungibles of a non-fungible resource that uses UUID as the type id
     * and perform auto incrimination of ID.
     * @param resourceAddress The address of the resource to mint tokens of.
     * @param entries The non-fungible tokens to mint
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    mintUuidNonFungible(resourceAddress: ManifestAstValue.Address | string, entries: ManifestAstValue.Array): ManifestBuilder;
    /**
     * An instruction to create a new fungible resource.
     * @param divisibility The divisibility of the resource.
     * @param metadata The metadata to set on the resource
     * @param accessRules The access rules to use for the resource
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createFungibleResource(isSupplyTrackable: ManifestAstValue.Bool, divisibility: ManifestAstValue.U8, metadata: ManifestAstValue.Map, accessRules: ManifestAstValue.Map): ManifestBuilder;
    /**
     * An instruction to create a fungible resource with initial supply
     * @param divisibility The divisibility of the resource.
     * @param metadata The metadata to set on the resource
     * @param accessRules The access rules to use for the resource
     * @param initialSupply A decimal value of the initial supply to mint during resource creation. If
     * present.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createFungibleResourceWithInitialSupply(isSupplyTrackable: ManifestAstValue.Bool, divisibility: ManifestAstValue.U8, metadata: ManifestAstValue.Map, accessRules: ManifestAstValue.Map, initialSupply: Decimal | number | string | ManifestAstValue.Decimal): ManifestBuilder;
    /**
     * An instruction to create a new non-fungible resource.
     * @param idType The type of the non-fungible id to use for this resource.
     * @param schema The schema that all non-fungibles of this resource must adhere to.
     * @param metadata The metadata to set on the resource
     * @param accessRules The access rules to use for the resource
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createNonFungibleResource(isSupplyTrackable: ManifestAstValue.Bool, idType: ManifestAstValue.Enum, schema: ManifestAstValue.Tuple, metadata: ManifestAstValue.Map, accessRules: ManifestAstValue.Map): ManifestBuilder;
    /**
     * An instruction to create a non-fungible resource with an initial supply
     * @param idType The type of the non-fungible id to use for this resource.
     * @param schema The schema that all non-fungibles of this resource must adhere to.
     * @param metadata The metadata to set on the resource
     * @param accessRules The access rules to use for the resource
     * @param initialSupply An optional initial supply for the non-fungible resource being created
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createNonFungibleResourceWithInitialSupply(isSupplyTrackable: ManifestAstValue.Bool, idType: ManifestAstValue.Enum, schema: ManifestAstValue.Tuple, metadata: ManifestAstValue.Map, accessRules: ManifestAstValue.Map, initialSupply: ManifestAstValue.Value): ManifestBuilder;
    /**
     * Creates a new access controller native component with the passed set of rules as the current
     * active rule set and the specified timed recovery delay in minutes.
     * @param controlledAsset A bucket of the asset that will be controlled by the access controller
     * @param ruleSet The set of rules to use for the access controller's primary, confirmation, and
     * recovery roles.
     * @param timedRecoveryDelayInMinutes The recovery delay in minutes to use for the access
     * controller
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createAccessController(controlledAsset: ManifestAstValue.Bucket, ruleSet: ManifestAstValue.Tuple, timedRecoveryDelayInMinutes: ManifestAstValue.Some | ManifestAstValue.None | ManifestAstValue.Enum): ManifestBuilder;
    /**
     * Creates a new identity native component with the passed access rule.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createIdentity(): ManifestBuilder;
    /**
     * Creates a validator given the public key of the owner who controls it
     * @param key The ECDSA Secp256k1 public key of the owner of the validator
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createValidator(key: ManifestAstValue.Bytes, feeFactor: ManifestAstValue.Decimal): ManifestBuilder;
    /**
     * Creates a new global account component which has the withdraw rule seen in the rule.
     * @param withdrawRule The withdraw rule to associate with the account.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createAccount(): ManifestBuilder;
    /**
     * Creates a new identity native component with the passed access rule.
     * @param accessRule The access rule to protect the identity with
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createIdentityAdvanced(accessRule: ManifestAstValue.Tuple): ManifestBuilder;
    /**
     * Creates a new global account component which has the withdraw rule seen in the rule.
     * @param withdrawRule The withdraw rule to associate with the account.
     * @returns A `ManifestBuilder` which the caller can continue chaining calls to.
     */
    createAccountAdvanced(withdrawRule: ManifestAstValue.Tuple): ManifestBuilder;
    /**
     * Builds the transaction manifest
     * @returns The transaction manifest
     */
    build(): TransactionManifest;
}

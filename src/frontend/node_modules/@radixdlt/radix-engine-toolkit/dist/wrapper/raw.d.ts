import { CompileNotarizedTransactionInput, CompileNotarizedTransactionOutput, CompileSignedTransactionIntentInput, CompileSignedTransactionIntentOutput, CompileTransactionIntentInput, CompileTransactionIntentOutput, ConvertManifestInput, ConvertManifestOutput, DecodeAddressInput, DecodeAddressOutput, DecompileNotarizedTransactionIntentInput, DecompileNotarizedTransactionIntentOutput, DecompileSignedTransactionIntentInput, DecompileSignedTransactionIntentOutput, DecompileTransactionIntentInput, DecompileTransactionIntentOutput, DecompileUnknownTransactionIntentInput, DecompileUnknownTransactionIntentOutput, DeriveBabylonAddressFromOlympiaAddressInput, DeriveBabylonAddressFromOlympiaAddressOutput, DeriveBabylonResourceAddressFromOlympiaResourceAddressInput, DeriveBabylonResourceAddressFromOlympiaResourceAddressOutput, DeriveVirtualAccountAddressInput, DeriveVirtualAccountAddressOutput, DeriveVirtualIdentityAddressInput, DeriveVirtualIdentityAddressOutput, EncodeAddressInput, EncodeAddressOutput, ExtractAddressesFromManifestInput, ExtractAddressesFromManifestOutput, HashNotarizedTransactionInput, HashNotarizedTransactionOutput, HashSignedTransactionIntentInput, HashSignedTransactionIntentOutput, HashTransactionIntentInput, HashTransactionIntentOutput, InformationInput, InformationOutput, KnownEntityAddressesInput, KnownEntityAddressesOutput, SborDecodeInput, SborDecodeOutput, SborEncodeInput, SborEncodeOutput, StaticallyValidateTransactionInput, StaticallyValidateTransactionOutput } from "../models";
import { RadixEngineToolkitWasmWrapper } from "./wasm_wrapper";
/**
 * A global instance of the Radix Engine Toolkit.
 */
export declare const RET: Promise<RadixEngineToolkitWasmWrapper>;
/**
 * A facade for the Radix Engine Toolkit which abstracts some of the async and instance logic away
 * from the developers consuming the class. Additionally, this class abstracts the toolkit's invoke
 * process away from the developer.
 */
export declare class RawRadixEngineToolkit {
    static information(input: InformationInput): Promise<InformationOutput>;
    static analyzeManifest(input: ExtractAddressesFromManifestInput): Promise<ExtractAddressesFromManifestOutput>;
    static convertManifest(input: ConvertManifestInput): Promise<ConvertManifestOutput>;
    static compileTransactionIntent(input: CompileTransactionIntentInput): Promise<CompileTransactionIntentOutput>;
    static hashTransactionIntent(input: HashTransactionIntentInput): Promise<HashTransactionIntentOutput>;
    static hashSignedTransactionIntent(input: HashSignedTransactionIntentInput): Promise<HashSignedTransactionIntentOutput>;
    static hashNotarizedTransaction(input: HashNotarizedTransactionInput): Promise<HashNotarizedTransactionOutput>;
    static compileSignedTransactionIntent(input: CompileSignedTransactionIntentInput): Promise<CompileSignedTransactionIntentOutput>;
    static compileNotarizedTransactionIntent(input: CompileNotarizedTransactionInput): Promise<CompileNotarizedTransactionOutput>;
    static decompileTransactionIntent(input: DecompileTransactionIntentInput): Promise<DecompileTransactionIntentOutput>;
    static decompileSignedTransactionIntent(input: DecompileSignedTransactionIntentInput): Promise<DecompileSignedTransactionIntentOutput>;
    static decompileNotarizedTransactionIntent(input: DecompileNotarizedTransactionIntentInput): Promise<DecompileNotarizedTransactionIntentOutput>;
    static decompileUnknownTransactionIntent(input: DecompileUnknownTransactionIntentInput): Promise<DecompileUnknownTransactionIntentOutput>;
    static encodeAddress(input: EncodeAddressInput): Promise<EncodeAddressOutput>;
    static decodeAddress(input: DecodeAddressInput): Promise<DecodeAddressOutput>;
    static sborEncode(input: SborEncodeInput): Promise<SborEncodeOutput>;
    static sborDecode(input: SborDecodeInput): Promise<SborDecodeOutput>;
    static deriveVirtualAccountAddress(input: DeriveVirtualAccountAddressInput): Promise<DeriveVirtualAccountAddressOutput>;
    static deriveVirtualIdentityAddress(input: DeriveVirtualIdentityAddressInput): Promise<DeriveVirtualIdentityAddressOutput>;
    static deriveBabylonAddressFromOlympiaAddress(input: DeriveBabylonAddressFromOlympiaAddressInput): Promise<DeriveBabylonAddressFromOlympiaAddressOutput>;
    static deriveBabylonResourceAddressFromOlympiaResourceAddress(input: DeriveBabylonResourceAddressFromOlympiaResourceAddressInput): Promise<DeriveBabylonResourceAddressFromOlympiaResourceAddressOutput>;
    static knownEntityAddresses(input: KnownEntityAddressesInput): Promise<KnownEntityAddressesOutput>;
    static staticallyValidateTransaction(input: StaticallyValidateTransactionInput): Promise<StaticallyValidateTransactionOutput>;
}

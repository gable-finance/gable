import { WalletSdk as WalletSdkType } from '@radixdlt/wallet-sdk';
import { Observable } from 'rxjs';
import { Logger } from 'tslog';
import { GatewayClient } from '../gateway/gateway';
import { RequestItemClient } from '../request-items/request-item-client';
export type WalletClient = ReturnType<typeof WalletClient>;
export declare const WalletClient: (input: {
    requestItemClient: RequestItemClient;
    logger?: Logger<unknown>;
    walletSdk: WalletSdkType;
    gatewayClient: GatewayClient;
    onCancelRequestItem$: Observable<string>;
}) => {
    request: (input: Parameters<WalletSdkType['request']>[0], requestItemId: string) => import("neverthrow").ResultAsync<{
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, import("@radixdlt/wallet-sdk").SdkError>;
    sendTransaction: (input: Parameters<WalletSdkType['sendTransaction']>[0]) => import("neverthrow").ResultAsync<{
        transactionIntentHash: string;
        status: import("@radixdlt/babylon-gateway-api-sdk").TransactionStatus;
    }, import("@radixdlt/wallet-sdk").SdkError>;
    extensionStatus$: Observable<{
        interactionId: string;
        eventType: "extensionStatus";
        isWalletLinked: boolean;
        isExtensionAvailable: boolean;
    }>;
    requestItems$: Observable<import("@radixdlt/connect-button").RequestItem[]>;
    resetRequestItems: () => void;
    destroy: () => void;
};

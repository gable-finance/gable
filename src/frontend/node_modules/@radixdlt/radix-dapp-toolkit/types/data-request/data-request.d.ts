import { ResultAsync } from 'neverthrow';
import { DataRequestBuilderItem } from './builders';
import { StateClient } from '../state/state';
import { RequestItemClient } from '../request-items/request-item-client';
import { WalletClient } from '../wallet/wallet-client';
import { DataRequestStateClient } from './data-request-state';
import { WalletData } from '../state/types';
export type DataRequestClient = ReturnType<typeof DataRequestClient>;
export declare const DataRequestClient: ({ stateClient, requestItemClient, walletClient, useCache, dataRequestStateClient, }: {
    stateClient: StateClient;
    requestItemClient: RequestItemClient;
    walletClient: WalletClient;
    dataRequestStateClient: DataRequestStateClient;
    useCache: boolean;
}) => {
    provideChallengeGenerator: (fn: () => Promise<string>) => void;
    provideDataRequestControl: (fn: (walletData: WalletData) => Promise<any>) => void;
    sendOneTimeRequest: (...items: DataRequestBuilderItem[]) => ResultAsync<{
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: ({
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        } | {
            entry: "emailAddresses";
            fields: string[];
        } | {
            entry: "phoneNumbers";
            fields: string[];
        })[];
        proofs: ({
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            address: string;
        } | {
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            address: string;
        })[];
        persona?: {
            label: string;
            identityAddress: string;
        } | undefined;
    }, {
        error: string;
        message: string;
    } | {
        error: string;
        message: string;
    } | {
        error: string;
        message?: string | undefined;
    }>;
    setState: (...items: DataRequestBuilderItem[]) => {
        sendRequest: () => ResultAsync<{
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            personaData: ({
                entry: "fullName";
                fields: {
                    variant: "western" | "eastern";
                    familyName: string;
                    nickname: string;
                    givenNames: string;
                };
            } | {
                entry: "emailAddresses";
                fields: string[];
            } | {
                entry: "phoneNumbers";
                fields: string[];
            })[];
            proofs: ({
                type: "persona";
                challenge: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                address: string;
            } | {
                type: "account";
                challenge: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                address: string;
            })[];
            persona?: {
                label: string;
                identityAddress: string;
            } | undefined;
        }, {
            error: string;
            message: string;
        } | {
            error: string;
            message: string;
        } | {
            error: string;
            message?: string | undefined;
        }>;
    };
    sendRequest: ({ isConnect, oneTime, }: {
        isConnect: boolean;
        oneTime: boolean;
    }) => ResultAsync<{
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: ({
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        } | {
            entry: "emailAddresses";
            fields: string[];
        } | {
            entry: "phoneNumbers";
            fields: string[];
        })[];
        proofs: ({
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            address: string;
        } | {
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            address: string;
        })[];
        persona?: {
            label: string;
            identityAddress: string;
        } | undefined;
    }, {
        error: string;
        message: string;
    } | {
        error: string;
        message: string;
    } | {
        error: string;
        message?: string | undefined;
    }>;
    updateSharedData: () => ResultAsync<{
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: ({
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        } | {
            entry: "emailAddresses";
            fields: string[];
        } | {
            entry: "phoneNumbers";
            fields: string[];
        })[];
        proofs: ({
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            address: string;
        } | {
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            address: string;
        })[];
        persona?: {
            label: string;
            identityAddress: string;
        } | undefined;
    }, {
        error: string;
        message: string;
    } | {
        error: string;
        message: string;
    } | {
        error: string;
        message?: string | undefined;
    }>;
};
